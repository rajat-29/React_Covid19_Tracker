{"version":3,"sources":["Components/Header/Header.js","Components/Title/Title.js","Components/Chart/Chart.js","Components/BarGraph/BarGraph.js","Components/List/List.js","Components/MainPart/MainPart.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js","Images/image.png"],"names":["Header","Navbar","bg","variant","Brand","Title","props","Container","style","fontSize","fontStyle","margin","Row","Col","summary","total","confirmedCasesIndian","discharged","deaths","Chart","data","chartData","BarGraph","labels","datasets","label","backgroundColor","options","legend","display","title","text","List","allList","states","length","map","state","className","key","loc","width","totalConfirmed","MainPart","Object","this","getData","axios","get","then","res","setState","storeData","regional","result","addDataForChart","store_states","i","push","getRandomColor","Math","floor","random","src","image","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.ad39e053.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>COVID19 - Tracker</Navbar.Brand>\n        </Navbar>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Container,Row,Col } from 'react-bootstrap';\n\nfunction Title(props) {\n    return (\n        <Container style={{fontSize: \"180%\",fontStyle: \"bold\",margin: \"10px 0px 10px 0px\"}}>\n            <Row>\n                <Col>Total : {props.summary.total}</Col>\n                <Col>Confirmed : {props.summary.confirmedCasesIndian}</Col>\n                <Col>Recovered : {props.summary.discharged}</Col>\n                <Col>Deaths : {props.summary.deaths}</Col>\n            </Row>\n        </Container>   \n    );\n}\n\nexport default Title;","import React from 'react';\nimport Pie from \"react-chartjs-2\";\n\nfunction Chart(props) {\n    return (\n        <Pie data={props.chartData} />\n    );\n}\n\nexport default Chart;","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nfunction BarGraph(props) {\n\n    return (\n        <Bar\n            data={{\n                labels : ['Infected','Recovered','Deaths'],\n                datasets : [\n                    {\n                        label : 'People',\n                        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                        data: [props.summary.confirmedCasesIndian,props.summary.discharged,props.summary.deaths],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current Status in India` },\n            }}\n        />\n    );\n}\n\nexport default BarGraph;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction List(props) {\n\n    const allList = \n    props.states.length > 0\n        ? props.states.map((state) => {      \n            return (\n                <div className=\"card m-2\" key={state.loc} style={{width : \"300px\"}}>\n                    <h5 className=\"card-header btn bg-primary text-white\">\n                        {state.loc}\n                    </h5>\n\n                    <div className=\"card-body\">\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                                Total\n                                <span className=\"badge badge-primary badge-pill\">\n                                    {state.totalConfirmed}\n                                </span>\n                            </li>\n                            <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                                Confirmed Cases\n                                <span className=\"badge badge-primary badge-pill\">\n                                    {state.confirmedCasesIndian}\n                                </span>\n                            </li>\n                            <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                                Recovered Cases\n                                <span className=\"badge badge-primary badge-pill\">\n                                    {state.discharged}\n                                </span>\n                            </li>\n                            <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                                Deaths\n                                <span className=\"badge badge-primary badge-pill\">\n                                    {state.deaths}\n                                </span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            );\n        })\n    :  \"\";\n    \n    return (\n        <Container>\n            <div className=\"row mt-2\">{allList}</div>\n        </Container>\n    );\n}\n\nexport default List;","import React,{ Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport axios from 'axios';\nimport Title from '../Title/Title';\nimport Chart from '../Chart/Chart';\nimport BarGraph from '../BarGraph/BarGraph';\nimport List from '../List/List';\nimport image from '../../Images/image.png';\n\nclass MainPart extends Component {\n\n    state = {\n        summary : Object,\n        states : [],\n        chartData : {\n            labels : [],\n            datasets : [{ data : [],label : \"\", backgroundColor : [] }],\n        },\n    };\n\n    componentDidMount() {\n        this.getData();\n    };\n\n    getData() {\n        axios\n        .get(\"https://api.rootnet.in/covid19-in/stats/latest\")\n        .then((res) => {\n            return res.data.data;\n        })\n        .then((res) => {\n            this.setState({\n                summary : res.summary,\n            });\n            this.storeData(res.regional);\n        })\n    }\n\n    storeData(result) {\n        result = this.addDataForChart(result);\n        let store_states = this.state.states;\n\n        for(let i=0;i<result.length;i++) {\n            store_states.push(result[i]);\n        }\n\n        this.setState({\n            states : store_states,\n        })\n    }\n\n    addDataForChart(result) {\n        this.state.chartData.datasets[0].label = 'State : ';\n        result.map((res) => {\n            this.state.chartData.labels.push(res.loc);\n            this.state.chartData.datasets[0].data.push(res.totalConfirmed);\n            this.state.chartData.datasets[0].backgroundColor.push(\n                this.getRandomColor()\n            );\n            return res\n        });\n        return result;\n    }\n\n    getRandomColor() {\n        var ColorCode = 'rgb(' + (Math.floor(Math.random() * 256)) + ',' + (Math.floor(Math.random() * 256)) + ',' + (Math.floor(Math.random() * 256)) + ')';\n        return ColorCode;\n    }\n\n    render() {\n        return (\n            <Container>\n                <img className=\"image\" src={image} />\n                <Title summary={this.state.summary} />\n                <Chart chartData={this.state.chartData} />\n                <BarGraph summary={this.state.summary} />\n                <List states={this.state.states} />\n            </Container>\n        )\n    }\n}\n\nexport default MainPart;","import React from 'react';\n\nfunction Footer() {\n     return (\n        <div className=\"footer-copyright bg-dark text-white py-3\">\n            @ Rajat Gupta\n        </div>\n     );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport MainPart from './Components/MainPart/MainPart';\nimport Footer from './Components/Footer/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainPart />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}